<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:security="http://www.springframework.org/schema/security"
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.2.xsd">
		

 <!-- Static resources such as CSS and JS files are ignored by Spring Security -->
    <security:http pattern="/static/**" security="none" />
    <security:http pattern="/nav/**" security="none" />
  


    <security:http use-expressions="true">
        <!-- Enables Spring Security CSRF protection 
        <security:csrf />
        -->
        <!-- Configures the form login -->
        <security:form-login
                login-page="/login"
                login-processing-url="/login/authenticate"
                default-target-url="/home" 
                authentication-failure-url="/login?error=bad_credentials"
                authentication-success-handler-ref="myAuthenticationSuccessHandler"
                username-parameter="username"
                password-parameter="password"/>
        <!-- Configures the logout function -->
        <security:logout
                logout-url="/logout"
                
                delete-cookies="JESSIONID"
                invalidate-session="true"
                />
       <security:intercept-url pattern="/todo/signup/**" access="permitAll"/>
        <security:intercept-url pattern="/project/**" access="permitAll"/>
        <security:intercept-url pattern="/marina/boat/photo/**" access="permitAll"/>
        <security:intercept-url pattern="/marina/list**" access="permitAll"/>
         <security:intercept-url pattern="/marina/profile/photo/**" access="permitAll"/>
          <security:intercept-url pattern="/marina/customer/photo/**" access="permitAll"/>
        
        <security:intercept-url pattern="/marina/website/find**" access="permitAll"/>
       
         <security:intercept-url pattern="/marina/slot/list**" access="permitAll"/>
        <security:intercept-url pattern="/portal/**" access="permitAll"/>
       
       
        <security:intercept-url pattern="/marina/**" access="hasRole('ROLE_MARINA_ADMIN_'.concat(@mySecurityService.getIdStore()))"/>
       

        
         <security:intercept-url pattern="/auth/**" access="permitAll"/>
         <security:intercept-url pattern="/login" access="permitAll"/>
        
        
        <!-- The rest of our application is protected. -->
        <security:intercept-url pattern="/**" access="isAuthenticated()"/>
      

        <!-- Adds social authentication filter to the Spring Security filter chain
        <security:custom-filter ref="socialAuthenticationFilter" before="PRE_AUTH_FILTER" />
        . -->
    </security:http>

    <bean id="myAuthenticationSuccessHandler"
        class="com.slb.sprinteye.security.MyAuthenticationSuccessHandler" />
    <!--
        Configures the authentication manager bean which processes authentication
        requests.
    -->
    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider user-service-ref="userDetailsService">
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>

        
    </security:authentication-manager>

    <!-- This is used to hash the password of the user. -->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
        <constructor-arg index="0" value="10"/>
    </bean>

    <!--
        Configures the social authentication filter which integrates Spring Social
        with Spring Security.
    
    <bean id="socialAuthenticationFilter" class="org.springframework.social.security.SocialAuthenticationFilter">
        <constructor-arg index="0" ref="authenticationManager"/>
        <constructor-arg index="1" ref="userIdSource"/>
        <constructor-arg index="2" ref="usersConnectionRepository"/>
        <constructor-arg index="3" ref="connectionFactoryLocator"/>

      
        <property name="signupUrl" value="/user/register"/>
    </bean>
    -->

   

    <!--
        This bean encrypts the authorization details of the connection. In
        our example, the authorization details are stored as plain text.
        DO NOT USE THIS IN PRODUCTION.
    -->
    <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="noOpText" />

    <!-- This bean is load the user specific data when form login is used. -->
    <bean id="userDetailsService" class="com.slb.sprinteye.security.service.RepositoryUserDetailsService" autowire="constructor"/>

    <!--
        This bean determines the account ID of the user. The example application
        uses the username as the account ID.
    -->
    <bean id="userIdSource" class="org.springframework.social.security.AuthenticationNameUserIdSource"/>
 
</beans>